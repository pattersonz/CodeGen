class testTypes
{
	final int i = 3;
	int x;
	void manyArgs(int x, int z, float y, char c, int u[])
	{
	}
	void argRedec(int x, int x)
	{
	}
	void coercFunc(bool x)
	{
	}
	void coercFunc2(float x)
	{
	}
	void coercFuncAr(int x[])
	{
	}
	void coercFuncAr2(float x[])
	{
	}
	void coercFuncAr3(bool x[])
	{
	}
	void testCoerc()
	{
		int i[1];
		bool b[1];
		char c[1];
		float f[1];
		coercFunc(true);
		coercFunc(1);
		coercFunc(1.0);
		coercFunc('0');
		coercFunc2(true);
		coercFunc2(1);
		coercFunc2(1.0);
		coercFunc2('0');
		coercFuncAr(i);
		coercFuncAr(b);
		coercFuncAr(c);
		coercFuncAr(f);
		coercFuncAr2(i);
		coercFuncAr2(b);
		coercFuncAr2(c);
		coercFuncAr2(f);
		coercFuncAr3(i);
		coercFuncAr3(b);
		coercFuncAr3(c);
		coercFuncAr3(f);
		manyArgs(3, 3, 3, '0', i);
		doesntexit(3);
	}
	int funct(int x)
	{
	}
	int funct2()
	{
		return '6';
		i = 3;
	}
	int funct3()
	{
		int x = 3;
		if (x)
		{
			return 3;
		}
	}
	int funct4()
	{
		int x = 3;
		if (x)
		{
			x = 5;
		}
		else
		{
			return x;
		}
	}
	int funct5()
	{
		int x = 2;
		if (x)
		{
			return (x + 2);
		}
		else
		{
			return (x + 4);
		}
	}
	int funct6(int x[])
	{
		int x = x[3];
		funct(x);
	}
	void funct3(int x)
	{
	}
	void otherExprs()
	{
		int i;
		char c;
		float f;
		bool b;
		i = (true ? 3 : 2);
		b = (b ? i : b);
		i = (b ? i : b);
		b = (i ? i : i);
		c = (b ? c : c);
		f = (b ? f : f);
		f = (b ? i : i);
		f = (b ? f : i);
		f = (b ? i : f);
		f = (c ? i : i);
		f = ((float)c);
		f = ((int)b);
		i = ((float)c);
		i = otherExprs();
	}
	void binaryExprCheck()
	{
		int i;
		char c;
		bool b;
		float f;
		i = (i + i);
		c = (c + c);
		b = (b + b);
		f = (f + f);
		i = (i + f);
		f = (i + f);
		f = (f + i);
		c = (i + i);
		b = (i + i);
		b = (i || i);
		b = (i || b);
		b = (b || b);
		i = (i || b);
		f = (i || b);
		c = (i || b);
		b = (c || c);
		b = (f || f);
		print(("test" + "concat"));
		print(("addToI" + i));
		print(("subI" - i));
		i = ("test" + i);
		b = ("test" || "test");
		b = ("test" + "char");
	}
	bool UnaryCheck()
	{
		int i;
		float f;
		char c;
		bool b;
		int ia[1];
		float fa[1];
		char ca[1];
		bool ba[1];
		i++
		b++
		c++
		f++
		ia++
		ba++
		ca++
		fa++
		ia[0]++
		ba[0]++
		ca[0]++
		fa[0]++
		i = (+i);
		i = (-i);
		i = (+f);
		i = (-f);
		b = (+i);
		b = (-c);
		b = (+f);
		b = (-b);
		c = (+c);
		c = (-i);
		c = (+b);
		c = (-f);
		f = (+i);
		f = (-i);
		f = (+f);
		f = (-f);
		i = (~i);
		b = (~i);
		b = (~b);
		c = (~f);
		c = (~b);
		return i;
	}
	float assignmentCheck(int x[])
	{
		int i = i;
		float f;
		char c;
		bool b;
		i = 1;
		i = 1.0;
		i = false;
		i = '0';
		f = 1;
		f = 1.0;
		f = false;
		f = '0';
		c = 1;
		c = 1.0;
		c = false;
		c = '0';
		b = 1;
		b = 1.0;
		b = false;
		b = '0';
		{
			int i[1];
			float f[1];
			char c[1];
			bool b[1];
			i = 1;
			i = 1.0;
			i = false;
			i = '0';
			f = 1;
			f = 1.0;
			f = false;
			f = '0';
			c = 1;
			c = 1.0;
			c = false;
			c = '0';
			b = 1;
			b = 1.0;
			b = false;
			b = '0';
			i = x;
			f = x;
			i[0] = 1;
			i[0] = 1.0;
			i[0] = false;
			i[0] = '0';
			f[0] = 1;
			f[0] = 1.0;
			f[0] = false;
			f[0] = '0';
			c[0] = 1;
			c[0] = 1.0;
			c[0] = false;
			c[0] = '0';
			b[0] = 1;
			b[0] = 1.0;
			b[0] = false;
			b[0] = '0';
		};
		return i;
	}
}
class<testTypes>:void argRedec:x already defined
class<testTypes>:void testCoerc:function argument type mismatch expected: bool got: final float
class<testTypes>:void testCoerc:function argument type mismatch expected: bool got: final char
class<testTypes>:void testCoerc:function argument type mismatch expected: float got: final bool
class<testTypes>:void testCoerc:function argument type mismatch expected: float got: final char
class<testTypes>:void testCoerc:function argument type mismatch expected: int[] got: bool[]
class<testTypes>:void testCoerc:function argument type mismatch expected: int[] got: char[]
class<testTypes>:void testCoerc:function argument type mismatch expected: int[] got: float[]
class<testTypes>:void testCoerc:function argument type mismatch expected: float[] got: int[]
class<testTypes>:void testCoerc:function argument type mismatch expected: float[] got: bool[]
class<testTypes>:void testCoerc:function argument type mismatch expected: float[] got: char[]
class<testTypes>:void testCoerc:function argument type mismatch expected: bool[] got: int[]
class<testTypes>:void testCoerc:function argument type mismatch expected: bool[] got: char[]
class<testTypes>:void testCoerc:function argument type mismatch expected: bool[] got: float[]
class<testTypes>:void testCoerc:doesntexit not declared
class<testTypes>:int funct:A path exists in method where a value is not returned in function
class<testTypes>:int funct2:invalid type return: return '6';
class<testTypes>:int funct2:Final type value can not be reassigned! i = 3;
class<testTypes>:int funct3:A path exists in method where a value is not returned in function
class<testTypes>:int funct4:A path exists in method where a value is not returned in function
class<testTypes>:int funct6:A path exists in method where a value is not returned in function
class<testTypes>:void funct3:funct3 already defined
class<testTypes>:void otherExprs:type mismatch between i and (b ? i : b)
class<testTypes>:void otherExprs:invalid conditonal statement in ternary expression: (c ? i : i)
class<testTypes>:void otherExprs:type mismatch between i and ((float)c)
class<testTypes>:void otherExprs:type mismatch between i and otherExprs()
class<testTypes>:void binaryExprCheck:Operands of binary expression are incompatible (c + c)
class<testTypes>:void binaryExprCheck:Operands of binary expression are incompatible (b + b)
class<testTypes>:void binaryExprCheck:type mismatch between i and (i + f)
class<testTypes>:void binaryExprCheck:type mismatch between c and (i + i)
class<testTypes>:void binaryExprCheck:type mismatch between i and (i || b)
class<testTypes>:void binaryExprCheck:type mismatch between f and (i || b)
class<testTypes>:void binaryExprCheck:type mismatch between c and (i || b)
class<testTypes>:void binaryExprCheck:invalid operation with strings ("subI" - i)
class<testTypes>:void binaryExprCheck:type mismatch between i and ("test" + i)
class<testTypes>:void binaryExprCheck:invalid operation with strings ("test" || "test")
class<testTypes>:void binaryExprCheck:type mismatch between b and ("test" + "char")
class<testTypes>:bool UnaryCheck:Cannot increment/decrement variable of type: bool line: b++
class<testTypes>:bool UnaryCheck:Cannot increment/decrement variable of type: char line: c++
class<testTypes>:bool UnaryCheck:cannot increment/decrement array variables: ia++
class<testTypes>:bool UnaryCheck:cannot increment/decrement array variables: ba++
class<testTypes>:bool UnaryCheck:cannot increment/decrement array variables: ca++
class<testTypes>:bool UnaryCheck:cannot increment/decrement array variables: fa++
class<testTypes>:bool UnaryCheck:Cannot increment/decrement variable of type: bool line: ba[0]++
class<testTypes>:bool UnaryCheck:Cannot increment/decrement variable of type: char line: ca[0]++
class<testTypes>:bool UnaryCheck:type mismatch between i and (+f)
class<testTypes>:bool UnaryCheck:type mismatch between i and (-f)
class<testTypes>:bool UnaryCheck:Type char cannot be incremented/decremented
class<testTypes>:bool UnaryCheck:type mismatch between b and (+f)
class<testTypes>:bool UnaryCheck:Type bool cannot be incremented/decremented
class<testTypes>:bool UnaryCheck:Type char cannot be incremented/decremented
class<testTypes>:bool UnaryCheck:type mismatch between c and (-i)
class<testTypes>:bool UnaryCheck:Type bool cannot be incremented/decremented
class<testTypes>:bool UnaryCheck:type mismatch between c and (-f)
class<testTypes>:bool UnaryCheck:type mismatch between i and (~i)
class<testTypes>:bool UnaryCheck:Type float cannot be negated
class<testTypes>:bool UnaryCheck:type mismatch between c and (~b)
class<testTypes>:float assignmentCheck:type mismatch between i and 1.0
class<testTypes>:float assignmentCheck:type mismatch between i and false
class<testTypes>:float assignmentCheck:type mismatch between i and '0'
class<testTypes>:float assignmentCheck:type mismatch between f and false
class<testTypes>:float assignmentCheck:type mismatch between f and '0'
class<testTypes>:float assignmentCheck:type mismatch between c and 1
class<testTypes>:float assignmentCheck:type mismatch between c and 1.0
class<testTypes>:float assignmentCheck:type mismatch between c and false
class<testTypes>:float assignmentCheck:type mismatch between b and 1.0
class<testTypes>:float assignmentCheck:type mismatch between b and '0'
class<testTypes>:float assignmentCheck:type mismatch between i and 1
class<testTypes>:float assignmentCheck:type mismatch between i and 1.0
class<testTypes>:float assignmentCheck:type mismatch between i and false
class<testTypes>:float assignmentCheck:type mismatch between i and '0'
class<testTypes>:float assignmentCheck:type mismatch between f and 1
class<testTypes>:float assignmentCheck:type mismatch between f and 1.0
class<testTypes>:float assignmentCheck:type mismatch between f and false
class<testTypes>:float assignmentCheck:type mismatch between f and '0'
class<testTypes>:float assignmentCheck:type mismatch between c and 1
class<testTypes>:float assignmentCheck:type mismatch between c and 1.0
class<testTypes>:float assignmentCheck:type mismatch between c and false
class<testTypes>:float assignmentCheck:type mismatch between c and '0'
class<testTypes>:float assignmentCheck:type mismatch between b and 1
class<testTypes>:float assignmentCheck:type mismatch between b and 1.0
class<testTypes>:float assignmentCheck:type mismatch between b and false
class<testTypes>:float assignmentCheck:type mismatch between b and '0'
class<testTypes>:float assignmentCheck:type mismatch between f and x
class<testTypes>:float assignmentCheck:type mismatch between i[0] and 1.0
class<testTypes>:float assignmentCheck:type mismatch between i[0] and false
class<testTypes>:float assignmentCheck:type mismatch between i[0] and '0'
class<testTypes>:float assignmentCheck:type mismatch between f[0] and false
class<testTypes>:float assignmentCheck:type mismatch between f[0] and '0'
class<testTypes>:float assignmentCheck:type mismatch between c[0] and 1
class<testTypes>:float assignmentCheck:type mismatch between c[0] and 1.0
class<testTypes>:float assignmentCheck:type mismatch between c[0] and false
class<testTypes>:float assignmentCheck:type mismatch between b[0] and 1.0
class<testTypes>:float assignmentCheck:type mismatch between b[0] and '0'
class<testTypes>:main not declared

